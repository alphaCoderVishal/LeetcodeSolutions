class Solution {
    public String longestPalindrome(String s) {
        // in this method we will start tracking from middle
	// and go to the right and left equally to track the palindrom
	char[] c =new char[s.length()];// converted the string to character array so that we can work at index level
	c=s.toCharArray();
	int max_so_far=0;
	int local_max1=0,local_max2=0,mid1=0;
	//let's traverse the loop
	// while loop would be suitable here
	
	//for odd length palindrome
	int i=(s.length()-1)/2,j=(s.length()-1)/2,k=0,l=0;
	//first half covered	
        for(i=0;i<s.length();i++) {
		int left=i;
		int right=i;
		while(left>=0 && right <= s.length()-1) {
			if(c[left]!=c[right])
				break;
			left--;
			right++;
		}
		local_max2=(right-1)-(left+1)+1;
		if(local_max2>max_so_far) {
			max_so_far=local_max2;
            mid1=i;
		}
	}
	
	
	
	//IN the case of even numbers 
	
	// let's write code for even lenght
	for(i=0;i<s.length();i++) {
		int left=i;
		int right=i+1;
		while(left>=0 && right <= s.length()-1) {
			if(c[left]!=c[right])
				break;
			left--;
			right++;
		}
		local_max2=(right-1)-(left+1)+1;
		if(local_max2>max_so_far) {
			max_so_far=local_max2;
            mid1=i;
		}
	}
	char[]arr;
	if(max_so_far%2==1) {
	 arr= Arrays.copyOfRange(c,(mid1-(max_so_far-1)/2),(mid1+((max_so_far+1)/2)));
	}
	else {
		arr= Arrays.copyOfRange(c,(mid1+1-(max_so_far)/2),(mid1+((max_so_far+1)/2)+1));
	}
	System.out.println((mid1+1-(max_so_far)/2)+ " "+(mid1+((max_so_far+1)/2)+1)+" "+max_so_far);
	String s2=String.valueOf(arr);
	
		return s2;	
	}
	}
